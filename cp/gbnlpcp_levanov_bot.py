# -*- coding: utf-8 -*-
"""GBNLPCP_Levanov_bot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V1GoKtThNKqC4bpek3Q4rEPJvHS_DY9A
"""

#!pip install python-telegram-bot --upgrade

#!pip install dialogflow

# -- coding: utf-8 -

TELEGRAM_TOKEN = '1186824418:AAHNLLHz8qbDSbNBDlLyR78EaZYpT5nR58g'

DIALOGFLOW_PROJECT_ID = 'newagent-oded'
DIALOGFLOW_LANGUAGE_CODE = 'ru'
SESSION_ID = 'GBNlpTestbotGBNLPCPLevanov_bot'

# файлик с данными для Google API
GOOGLE_APP_CREDENTIALS = 'newagent-oded-65254c785997.json'

TALES_FOLDER = 'tales'

MODE_DIALOG = 'Dialog'
MODE_MULTIPLY = 'Multiply'

import os
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
import dialogflow

import random

os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = GOOGLE_APP_CREDENTIALS

updater = Updater(token=TELEGRAM_TOKEN)
dispatcher = updater.dispatcher

def multiplyTraining(answer = None, last_answer = None):
  if last_answer == None:
    a, b = random.randint(1, 10), random.randint(1, 10)
    last_answer = a*b
    
    return last_answer, f"{a}x{b}"
  elif(answer != None):
    if last_answer == answer:
      res = "Молодец!"
    else:
      res = f"Не верно. Правильный ответ {last_answer}"

    return res

def getTale():
  files = [name for name in os.listdir(TALES_FOLDER) if os.path.isfile(TALES_FOLDER+'/'+name)]
  tale_file = random.choice(files)

  result = []
  with open(TALES_FOLDER+'/'+tale_file) as tf:
    for line in tf:
      if len(line.strip()) > 0:
        result.append(line.replace("\n", ""))

  return result

def startCommand(bot, update, chat_data):
    chat_data['mode'] = MODE_DIALOG
    bot.send_message(chat_id=update.message.chat_id, text='Привет!')

def textMessage(bot, update, chat_data):
  print('Chat data', chat_data, chat_data.get('mode', MODE_DIALOG))
  if chat_data.get('mode', MODE_DIALOG) == MODE_MULTIPLY:
    print('Checking answer: ', chat_data.get('last_answer', None), ' == ', int(update.message.text))
    res = multiplyTraining(answer=int(update.message.text), last_answer=chat_data.get('last_answer', None))
    chat_data['mode'] = MODE_DIALOG
    bot.send_message(chat_id=update.message.chat_id, text= res)
  else:
    session_client = dialogflow.SessionsClient()
    session = session_client.session_path(DIALOGFLOW_PROJECT_ID, SESSION_ID)
    text_input = dialogflow.types.TextInput(text=update.message.text , language_code=DIALOGFLOW_LANGUAGE_CODE)
    query_input = dialogflow.types.QueryInput(text=text_input)
    try:
        response = session_client.detect_intent(session=session, query_input=query_input)
    except InvalidArgument:
        raise

    print("Query text:", response.query_result.query_text)
    print("Detected intent:", response.query_result.intent.display_name)
    print("Detected intent confidence:", response.query_result.intent_detection_confidence)
    print("Fulfillment text:", response.query_result.fulfillment_text)

    if response.query_result.intent.display_name == 'Farytale':
      bot.send_message(chat_id=update.message.chat_id, text= response.query_result.fulfillment_text)
      tale = getTale()
      for line in tale:
        bot.send_message(chat_id=update.message.chat_id, text=line)
      bot.send_message(chat_id=update.message.chat_id, text="Вот и сказочке конец, а кто слушал - молодец!")
    elif response.query_result.intent.display_name == 'Multiply':
      chat_data['mode'] = MODE_MULTIPLY
      last_answer, q = multiplyTraining()
      chat_data['last_answer'] = last_answer
      bot.send_message(chat_id=update.message.chat_id, text= response.query_result.fulfillment_text+" "+q)
    else:
      text = response.query_result.fulfillment_text
      
      bot.send_message(chat_id=update.message.chat_id, text= text if text else 'Что?')

    print('Chat data up', chat_data)

# Хендлеры
start_command_handler = CommandHandler('start', startCommand, pass_chat_data=True)
text_message_handler = MessageHandler(Filters.text, textMessage, pass_chat_data=True)
# Добавляем хендлеры в диспетчер
dispatcher.add_handler(start_command_handler)
dispatcher.add_handler(text_message_handler)
# Начинаем поиск обновлений
updater.start_polling(clean=True)
# Останавливаем бота, если были нажаты Ctrl + C
updater.idle()

